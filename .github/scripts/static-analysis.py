#!/usr/bin/env python3

import yardstick
from yardstick.cli import config
import logging.config

# set the config object to click context to pass to subcommands
# initialize yardstick based on the current configuration
cfg: config.Application = config.load()
yardstick.store.config.set_values(store_root=cfg.store_root)

log_level = "WARN"

logging.config.dictConfig(
    {
        "version": 1,
        "formatters": {
            "standard": {
                # [%(module)s.%(funcName)s]
                "format": "%(asctime)s [%(levelname)s] %(message)s",
                "datefmt": "",
            },
        },
        "handlers": {
            "default": {
                "level": log_level,
                "formatter": "standard",
                "class": "logging.StreamHandler",
                "stream": "ext://sys.stderr",
            },
        },
        "loggers": {
            "": {  # root logger
                "handlers": ["default"],
                "level": log_level,
            },
        },
    }
)

######################

missing_digests = set()

for result_set_name, result_set_obj in cfg.result_sets.items():
    for request in result_set_obj.scan_requests():
        img = yardstick.artifact.Image(request.image)
        if not img.digest:
            missing_digests.add(request.image)
            

fail = len(missing_digests) > 0

if missing_digests:
    print("All images required digests, these are missing digests references:")
    for img in missing_digests:
        print("  ", img)

print()
if fail:
    print("FAIL")
    exit(1)
print("PASS")
